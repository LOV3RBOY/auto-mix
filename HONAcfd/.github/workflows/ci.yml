name: AI Music Assistant CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Flake8
        run: pip install flake8

      - name: Run Flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service:
          - cli-client
          - job-orchestrator-service
          - mixing-mastering-service
          - prompt-parser-service
          - sound-generation-service
          - style-analysis-service
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies for ${{ matrix.service }}
      working-directory: ${{ matrix.service }}
      run: |
        pip install -r requirements.txt
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Install system dependencies for Style Analysis
      if: matrix.service == 'style-analysis-service'
      run: sudo apt-get update && sudo apt-get install -y libsndfile1

    - name: Run tests for ${{ matrix.service }}
      working-directory: ${{ matrix.service }}
      run: pytest

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Create output directory for Docker volume
        run: mkdir -p output/stems

      - name: Build and run Docker Compose stack
        run: docker-compose up --build -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services..."
          sleep 30 # Give services time to start up
          docker-compose ps
          
      - name: Install integration test dependencies
        working-directory: tests
        run: pip install -r requirements.txt
      
      - name: Run integration tests
        working-directory: tests
        run: pytest
      
      - name: Tear down Docker Compose stack
        if: always()
        run: docker-compose down -v
